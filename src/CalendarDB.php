<?php
/**
 * Created by PhpStorm.
 * User: shaojie
 * Date: 15-2-28
 * Time: 上午11:35
 */

namespace Woodfish\Component\Date;

abstract class CalendarDB
{
    // 日历数据起始年
    const YEAR_BASE = 1901;

    // 日历数据长度
    const YEAR_NUM = 150;

    protected static $lunarNumbers = array("零", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十");

    public static $weekdayNames = array("星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六");

    // 农历月
    protected static $lunarMonthNames = array(
        "正月",
        "二月",
        "三月",
        "四月",
        "五月",
        "六月",
        "七月",
        "八月",
        "九月",
        "十月",
        "冬月",
        "腊月",
    );

    // 农历日
    protected static $lunarDayNames = array(
        "初一",
        "初二",
        "初三",
        "初四",
        "初五",
        "初六",
        "初七",
        "初八",
        "初九",
        "初十",
        "十一",
        "十二",
        "十三",
        "十四",
        "十五",
        "十六",
        "十七",
        "十八",
        "十九",
        "二十",
        "廿一",
        "廿二",
        "廿三",
        "廿四",
        "廿五",
        "廿六",
        "廿七",
        "廿八",
        "廿九",
        "三十",
    );

    /*
     * 星座名
     */
    protected static $astroNames = array(
        "白羊座",
        "金牛座",
        "双子座",
        "巨蟹座",
        "狮子座",
        "处女座",
        "天秤座",
        "天蝎座",
        "射手座",
        "摩羯座",
        "水瓶座",
        "双鱼座",
    );

    /*
     * 天干名称
     */
    protected static $KanDict = array(
        "甲",
        "乙",
        "丙",
        "丁",
        "戊",
        "己",
        "庚",
        "辛",
        "壬",
        "癸",
    );

    /*
     * 地支名称
     */
    protected static $ChiDict = array(
        "子",
        "丑",
        "寅",
        "卯",
        "辰",
        "巳",
        "午",
        "未",
        "申",
        "酉",
        "戌",
        "亥",
    );

    /*
     * 生肖
     */
    protected static $ShengXiaoDict = array(
        "鼠",
        "牛",
        "虎",
        "兔",
        "龙",
        "蛇",
        "马",
        "羊",
        "猴",
        "鸡",
        "狗",
        "猪",
    );

    /*
     * 数组中每一个元素存放1901~2050期间每一年的闰月月份，取值范围0~12（0表示该年没有闰月）
     */
    protected static $LunarLeapMonthDict = array(
        0x00, 0x00, 0x05, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, // 1910
        0x06, 0x00, 0x00, 0x05, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, // 1920
        0x00, 0x05, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x06, // 1930
        0x00, 0x00, 0x05, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, // 1940
        0x06, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, // 1950
        0x00, 0x05, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x06, // 1960
        0x00, 0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, // 1970
        0x05, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x06, 0x00, // 1980
        0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x06, 0x00, 0x00, 0x05, // 1990
        0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x05, 0x00, 0x00, // 2000
        0x04, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x05, 0x00, // 2010
        0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x06, 0x00, 0x00, 0x04, // 2020
        0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x05, 0x00, 0x00, // 2030
        0x03, 0x00, 0x0B, 0x00, 0x00, 0x06, 0x00, 0x00, 0x05, 0x00, // 2040
        0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x05, 0x00, 0x00, 0x03, // 2050
    );

    /*
     * 农历每年各月大小，以位来保存， 1为大月，0为小月
     */
    protected static $MonthDayDict = array(
        0x0752, 0x0EA5, 0x164A, 0x064B, 0x0A9B, 0x1556, 0x056A, 0x0B59, 0x1752, 0x0752, // 1910
        0x1B25, 0x0B25, 0x0A4B, 0x14AB, 0x02AD, 0x056B, 0x0B69, 0x0DA9, 0x1D92, 0x0E92, // 1920
        0x0D25, 0x1A4D, 0x0A56, 0x02B6, 0x15B5, 0x06D4, 0x0EA9, 0x1E92, 0x0E92, 0x0D26, // 1930
        0x052B, 0x0A57, 0x12B6, 0x0B5A, 0x06D4, 0x0EC9, 0x0749, 0x1693, 0x0A93, 0x052B, // 1940
        0x0A5B, 0x0AAD, 0x056A, 0x1B55, 0x0BA4, 0x0B49, 0x1A93, 0x0A95, 0x152D, 0x0536, // 1950
        0x0AAD, 0x15AA, 0x05B2, 0x0DA5, 0x1D4A, 0x0D4A, 0x0A95, 0x0A97, 0x0556, 0x0AB5, // 1960
        0x0AD5, 0x06D2, 0x0EA5, 0x0EA5, 0x064A, 0x0C97, 0x0A9B, 0x155A, 0x056A, 0x0B69, // 1970
        0x1752, 0x0B52, 0x0B25, 0x164B, 0x0A4B, 0x14AB, 0x02AD, 0x056D, 0x0B69, 0x0DA9, // 1980
        0x0D92, 0x1D25, 0x0D25, 0x1A4D, 0x0A56, 0x02B6, 0x05B5, 0x06D5, 0x0EA9, 0x1E92, // 1990
        0x0E92, 0x0D26, 0x0A56, 0x0A57, 0x14D6, 0x035A, 0x06D5, 0x16C9, 0x0749, 0x0693, // 2000
        0x152B, 0x052B, 0x0A5B, 0x155A, 0x056A, 0x1B55, 0x0BA4, 0x0B49, 0x1A93, 0x0A95, // 2010
        0x052D, 0x0AAD, 0x0AB5, 0x15AA, 0x05D2, 0x0DA5, 0x1D4A, 0x0D4A, 0x0C95, 0x152E, // 2020
        0x0556, 0x0AB5, 0x15B2, 0x06D2, 0x0EA5, 0x0725, 0x064B, 0x0C97, 0x0CAB, 0x055A, // 2030
        0x0AD6, 0x0B69, 0x1752, 0x0B52, 0x0B25, 0x1A4B, 0x0A4B, 0x04AB, 0x055B, 0x05AD, // 2040
        0x0B6A, 0x1B52, 0x0D92, 0x1D25, 0x0D25, 0x0A55, 0x14AD, 0x04B6, 0x05B5, 0x0DAA, // 2050
    );

    /*
     * 1月1日 到农历一月一日有多少天
     */
    protected static $AccDaysDict = array(
        49, 38, 28, 46, 34, 24, 43, 32, 21, 40, 29, 48, 36, 25, 44, 33, 22, 41, 31, 50, 38, 27, 46, 35, 23, 43, 32,
        22, 40, 29, 47, 36, 25, 44, 34, 23, 41, 30, 49, 38, 26, 45, 35, 24, 43, 32, 21, 40, 28, 47, 36, 26, 44, 33,
        23, 42, 30, 48, 38, 27, 45, 35, 24, 43, 32, 20, 39, 29, 47, 36, 26, 45, 33, 22, 41, 30, 48, 37, 27, 46, 35,
        24, 43, 32, 50, 39, 28, 47, 36, 26, 45, 34, 22, 40, 30, 49, 37, 27, 46, 35, 23, 42, 31, 21, 39, 28, 48, 37,
        25, 44, 33, 22, 40, 30, 49, 38, 27, 46, 35, 24, 42, 31, 21, 40, 28, 47, 36, 25, 43, 33, 22, 41, 30, 49, 38,
        27, 45, 34, 23, 42, 31, 21, 40, 29, 47, 36, 25, 44, 32, 22,
    );

    // 二十四节气数据（注：这里是公历日期）
    // 1901~2050期间的二十四节气的公历日期满足如下规律：
    // 1月 小寒（5~7） 大寒（19~21）
    // 2月 立春（3~5） 雨水（18~20）
    // 3月 惊蛰（5~7） 春分（20~22）
    // 4月 清明（4~6） 谷雨（19~21）
    // 5月 立夏（5~7） 小满（20~22）
    // 6月 芒种（5~7） 夏至（20~22）
    // 7月 小暑（6~8） 大暑（22~24）
    // 8月 立秋（7~9） 处暑（22~24）
    // 9月 白露（7~9） 秋分（22~24）
    // 10月 寒露（7~9） 霜降（23~24）
    // 11月 立冬（7~8） 小雪（21~23）
    // 12月 大雪（6~8） 冬至（21~23）
    // 可以看出，如果把每月的第二个节气的日期减去15将得到与第一个节气相近的日期，且都在3~9范围内
    // 因此，可以使用一个字节来保存每个月两个节气的日期
    // 另外，也可以看出，每个节气都在3天的波动范围内，因此还可以近一步把四个节气压缩在一个字节内
    // 但那样做使用起来太复杂，因此这里还是把两个节气保存在一个字节中
    //
    // 数据格式：每个字节的高四位存放每个月的第一个节气的日期，低四位存放该月的第二个
    // 节气日期减去15之后的日期

    protected static $solarTermNameDict = array(
        "小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至",
        "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至",
    );

    protected static $solarTermDict = array(
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1901
        0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1902
        0x66, 0x55, 0x77, 0x66, 0x77, 0x77, 0x89, 0x99, 0x99, 0x99, 0x88, 0x88, // 1903
        0x76, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x88, 0x77, // 1904
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1905
        0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1906
        0x66, 0x55, 0x77, 0x66, 0x77, 0x77, 0x89, 0x99, 0x99, 0x99, 0x88, 0x88, // 1907
        0x76, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1908
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1909
        0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1910
        0x66, 0x55, 0x77, 0x66, 0x77, 0x77, 0x89, 0x99, 0x99, 0x99, 0x88, 0x88, // 1911
        0x76, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1912
        0x65, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1913
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1914
        0x66, 0x55, 0x67, 0x66, 0x67, 0x77, 0x89, 0x89, 0x99, 0x99, 0x88, 0x88, // 1915
        0x66, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1916
        0x65, 0x44, 0x66, 0x56, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x77, // 1917
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x87, // 1918
        0x66, 0x55, 0x67, 0x66, 0x67, 0x77, 0x89, 0x89, 0x99, 0x99, 0x88, 0x88, // 1919
        0x66, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1920
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x77, // 1921
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x87, // 1922
        0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x99, 0x99, 0x88, 0x88, // 1923
        0x66, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1924
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x77, // 1925
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1926
        0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1927
        0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1928
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1929
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1930
        0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1931
        0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1932
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1933
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1934
        0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1935
        0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1936
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1937
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1938
        0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1939
        0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1940
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1941
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1942
        0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1943
        0x66, 0x55, 0x66, 0x55, 0x56, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1944
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1945
        0x65, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, // 1946
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1947
        0x66, 0x55, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 1948
        0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x89, 0x88, 0x89, 0x87, 0x77, // 1949
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, // 1950
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, // 1951
        0x66, 0x55, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 1952
        0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1953
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x98, 0x88, 0x77, // 1954
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1955
        0x66, 0x55, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 1956
        0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1957
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1958
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1959
        0x66, 0x54, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1960
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1961
        0x66, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1962
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1963
        0x66, 0x54, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1964
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1965
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1966
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1967
        0x66, 0x54, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1968
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1969
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1970
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, // 1971
        0x66, 0x54, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1972
        0x55, 0x45, 0x66, 0x55, 0x56, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1973
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1974
        0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, // 1975
        0x66, 0x54, 0x55, 0x45, 0x56, 0x56, 0x78, 0x79, 0x78, 0x88, 0x77, 0x77, // 1976
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 1977
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x88, 0x77, // 1978
        0x66, 0x44, 0x66, 0x56, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, // 1979
        0x66, 0x54, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1980
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x87, 0x77, // 1981
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1982
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, // 1983
        0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, // 1984
        0x55, 0x44, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 1985
        0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1986
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x89, 0x88, 0x99, 0x88, 0x77, // 1987
        0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 1988
        0x55, 0x44, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1989
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 1990
        0x65, 0x44, 0x66, 0x55, 0x76, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1991
        0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 1992
        0x55, 0x43, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1993
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1994
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x86, 0x88, 0x99, 0x88, 0x77, // 1995
        0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 1996
        0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 1997
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 1998
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 1999
        0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 2000
        0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2001
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 2002
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 2003
        0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 2004
        0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2005
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2006
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, // 2007
        0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, // 2008
        0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2009
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2010
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x88, 0x77, // 2011
        0x66, 0x44, 0x55, 0x45, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, // 2012
        0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, // 2013
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2014
        0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 2015
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, // 2016
        0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, // 2017
        0x55, 0x44, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2018
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 2019
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x76, // 2020
        0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 2021
        0x55, 0x44, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2022
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, // 2023
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, // 2024
        0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 2025
        0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2026
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 2027
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, // 2028
        0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 2029
        0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2030
        0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, // 2031
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, // 2032
        0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x76, // 2033
        0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x88, 0x78, 0x88, 0x77, 0x77, // 2034
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2035
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, // 2036
        0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, // 2037
        0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2038
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2039
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, // 2040
        0x55, 0x33, 0x55, 0x45, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, // 2041
        0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, // 2042
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2043
        0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x78, 0x77, 0x66, // 2044
        0x55, 0x33, 0x55, 0x44, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, // 2045
        0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, // 2046
        0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, // 2047
        0x65, 0x44, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x78, 0x76, 0x66, // 2048
        0x54, 0x33, 0x55, 0x55, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x76, // 2049
        0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x88, 0x88, 0x77, 0x77, // 2050
    );

    /**
     * CalendarDB是否支持农历年份
     *
     * @param int $year
     *
     * @return bool
     */
    public static function validSolarYear($year)
    {
        return $year >= static::YEAR_BASE && $year < (static::YEAR_BASE + static::YEAR_NUM);
    }

    /**
     * 农历年的天干地支名称
     *
     * @param $year
     *
     * @return string
     */
    public static function getKanChiName($year)
    {
        // 1901年干支为37
        $model = (($year - static::YEAR_BASE) + 37) % 60;

        return static::$KanDict[$model % 10] + static::$ChiDict[$model % 12];
    }

    /*
     * 查询农历某年的闰月，没有闰月则返回0，有闰月则返回闰月
     *
     * @param int $year
     * @return int
     */
    public static function getLunarLeapMonth($lunarYear)
    {
        $position = $lunarYear - static::YEAR_BASE;
        if ($position >= count(static::$LunarLeapMonthDict)) {
            $position = 0;
        }

        return static::$LunarLeapMonthDict[$position];
    }

    /*
     * 查询农历某年某月有多少天 这个地方是有问题的 月不是正常的月
     *
     * @param $lunarYear
     * @param $lunarMonth
     *
     * @return int
     */
    public static function getFakeLunarMonthDays($lunarYear, $lunarMonth)
    {
        return (static::$MonthDayDict[$lunarYear - static::YEAR_BASE] & (1 << ($lunarMonth - 1))) != 0 ? 30 : 29;
    }

    /*
     * 公历1月1日 到农历一月一日有多少天
     *
     * @param $year
     *
     * @return int
     */
    public static function getAccDays($year)
    {
        return static::$AccDaysDict[$year - static::YEAR_BASE];
    }

    /*
     * @param $lunarYear
     * @return string 查询生肖
     */
    public static function getShengXiao($lunarYear)
    {
        return static::$ShengXiaoDict[($lunarYear - 1900) % 12];
    }

    /**
     * @param $index
     * @return string 查询生肖
     */
    public static function getShengXiaoByIndex($index)
    {
        return static::$ShengXiaoDict[$index];
    }

    /**
     * @param $lunarYear
     * @return int 生肖的index
     */
    public static function getShengXiaoIndex($lunarYear)
    {
        return ($lunarYear - 1900) % 12;
    }

    /**
     * @param  SolarDate $birth
     * @param  boolean   $beginWithLiChun
     * @return string    查询生肖（beginWithLiChun 是否按立春来算生肖)
     */
    public static function getShengXiaoInfo(SolarDate $birth, $beginWithLiChun)
    {
        if (!$beginWithLiChun) {
            $lunarBirth = LunarDate::fromSolarDate($birth);

            return static::getShengXiao($lunarBirth->getYear());
        }

        $year = $birth->getYear();
        // 得到此年立春这一天是2月几日
        $dayOfLiChun = static::getLichun($year);
        $dateOfLiChun = new SolarDate($year, 2, $dayOfLiChun);
        if ($birth->beforeThan($dateOfLiChun)) {
            $year--;
        }

        return static::getShengXiao($year);
    }

    /**
     * @param $year
     * @return int 得到次年立春是2月的几号
     */
    public static function getLichun($year)
    {
        return static::$solarTermDict[($year - static::YEAR_BASE) * 12 + 1] >> 4;
    }

    /*
     * @param $index
     * @return string 获取星座名称
     */
    public static function getAstroNameByIndex($index)
    {
        if ($index < 0 || $index > 11) {
            return "未知";
        }

        return static::$astroNames[$index];
    }

    /*
     * { "白羊座", "金牛座", "双子座", "巨蟹座", "狮子座", "处女座", "天秤座", "天蝎座", "射手座", "摩羯座", "水瓶座", "双鱼座" };
     * @param $month
     * @param $day
     * @return string 获取星座名称
     */
    public static function getAstroName($month, $day)
    {
        return static::getAstroNameByIndex(static::getAstro($month, $day));
    }

    /*
     * @param $month
     * @param $day
     * @return 获取星座index
     */
    public static function getAstro($month, $day)
    {
        if ($month < 1 || $month > 12 || $day < 1 || $day > 31) {
            return -1;
        }
        $beginDays = array(
            21, 20, 21, 21, 22, 22, 23, 24, 24, 24, 23, 22,
        );

        if ($day < $beginDays[$month - 1]) {
            return ($month + 8) % 12;
        } else {
            return ($month + 9) % 12;
        }
    }

    /**
     * @param $year
     * @return string
     */
    public static function getLunarYearName($year)
    {
        $sb = '';

        if ($year < 0 || $year > 9999) {
            return $sb;
        }

        $sb = $sb . static::$lunarNumbers[intval($year / 1000)];
        $sb = $sb . static::$lunarNumbers[intval($year / 100) % 10];
        $sb = $sb . static::$lunarNumbers[intval($year / 10) % 10];
        $sb = $sb . static::$lunarNumbers[$year % 10];

        return $sb;
    }

    /**
     * @param $month
     * @return string
     */
    public static function getLunarMonthName($month)
    {
        if ($month < -12 || $month === 0 || $month > 12) {
            return "未知";
        }

        if ($month < 0) {
            return "闰" . static::$lunarMonthNames[abs($month) - 1];
        } else {
            return static::$lunarMonthNames[abs($month) - 1];
        }
    }

    /**
     * @param $day
     * @return string
     */
    public static function getLunarDayName($day)
    {
        if ($day < 0 || $day > 30) {
            return "未知";
        }

        return static::$lunarDayNames[$day - 1];
    }

    /**
     * 根据年月日返回是否是节气，如果不是节气日返回-1 否则返回节气的index
     *
     * @param $year
     * @param $month
     * @param $day
     *
     * @return string
     */
    public static function getTermBySolarDate($year, $month, $day)
    {
        $data = static::$solarTermDict[($year - static::YEAR_BASE) * 12 + $month - 1];
        if ($day < 15) {
            return (($data >> 4) == $day ? ($month - 1) * 2 : -1);
        } else {
            return ((($data & 0x0F) + 15) == $day ? ($month - 1) * 2 + 1 : -1);
        }
    }

    /**
     * @param $year
     * @param $month
     * @param $day
     * @return string 节气
     */
    public static function getTermBySolarDateName($year, $month, $day)
    {
        return static::getTermName(static::getTermBySolarDate($year, $month, $day));
    }

    /*
     * @param $index
     * @return string 返回节气名称
     */
    public static function getTermName($index)
    {
        return ($index > 23 || $index < 0) ? "" : static::$solarTermNameDict[$index];
    }

    /**
     * @param $year
     * @param $month
     * @return int 本月第一个节气的日子
     */
    public static function getFirstTerm($year, $month)
    {
        return static::$solarTermDict[($year - static::YEAR_BASE) * 12 + $month - 1] >> 4;
    }

    /**
     * @param $year
     * @param $month
     * @return int 本月第二个节气的日子
     */
    public static function getSecondTerm($year, $month)
    {
        $pre = static::$solarTermDict[($year - static::YEAR_BASE) * 12 + $month - 1];
        $tem = 0x000f;

        return ($pre & $tem) + 15;
    }
}
